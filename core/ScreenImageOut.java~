import java.awt.Frame;
import java.awt.image.BufferedImage;
import java.awt.Graphics;
import java.awt.Color;

import java.awt.event.*;

// SnakeFrame is the main loop of the game,
// handling logic and movement from
// frame to frame.
public class SnakeFrame implements KeyListener
{
    static int width, height;
    static Frame frame;

    public static void Init()
    {
        frame = new Frame();
        frame.setSize(Map.width + 10, Map.height + 20);
        buffer = new BufferedImage(Map.width, Map.height, BufferedImage.TYPE_INT_RGB);
        bufferG = buffer.getGraphics();
        frame.setVisible(true);
        frame.addKeyListener(this);
    }

    //Graphics
    public static void paint()
    {
        // bufferG.drawImage(buffer, 5, 20, null);
        frame.getGraphics().drawImage(buffer, 5, 20, null);
        // frame.repaint();
    }
    public static void fill(int r, int g, int b) { bufferG.setColor(new Color(r, g, b)); }
    public static void ellipse(int x, int y, int width, int height) { bufferG.fillOval(x, y, width, height); }
    public static void rect(int x, int y, int width, int height) { bufferG.fillRect(x, y, width, height); }

    static Color bg = Color.BLACK;
    public static void clear()
    {
        bufferG.setColor(bg);
        bufferG.fillRect(0, 0, width, height);
    }

    //KeyInput

    public static final int RIGHT = 0, UP = 1, LEFT = 2, DOWN = 3;
    //keyMappings follows [player][key] indexing.
    public static int[][] keyMappings = new int[][] {new int[]{KeyEvent.VK_RIGHT, KeyEvent.VK_UP, KeyEvent.VK_LEFT, KeyEvent.VK_DOWN}, new int[]{KeyEvent.VK_D, KeyEvent.VK_W, KeyEvent.VK_A, KeyEvent.VK_S}};
    public static boolean[] downs = new boolean[keyMappings.length];
    public static int[] directions = new int[keyMappings.length];

//key events
    public static void keyReset()
    {
        for(int i = 0; i < downs.length; i++) {
            downs[i] = false;
        }
    }
    /** Handle the key typed event from the text field. */
    public static void keyTyped(KeyEvent e)
    {
        //keys[e.getKeyCode()];
    }

    /** Handle the key pressed event from the text field. */
    public static void keyPressed(KeyEvent e)
    {

//#Pretend this is a hash table

        int key = e.getKeyCode();
        for(int i = 0; i < keyMappings.length; i++) {
            for(int j = 0; j < keyMappings[i].length; j++) {
                if(key == keyMappings[i][j]) {
                    if (!downs[i]) {
			System.out.println("Direction " + j);
                        downs[i] = true;//downs[i] = 1;
                        directions[i] = j;
                    }
                    return;
                }
            }
        }

//#Stop pretending.
    }

    /** Handle the key released event from the text field. */
    public static void keyReleased(KeyEvent e)
    {
        //int key = e.getKeyCode();
        //if (key > keys.length);
        //keys[key] = false;
    }
}
